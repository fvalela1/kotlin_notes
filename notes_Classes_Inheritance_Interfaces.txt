fun main(args : Array<String>) {

    val bowser = Animal("Bowser", 20.0, 13.5)
    bowser.getInfo()

    val spot = Dog("Spot", 20.0, 14.5, "Paul Smith")

    spot.getInfo()

    val tweety = Bird("Tweety", true)

    tweety.fly(10.0)
}

//there are no static methods. classes will be final unless marked as 'open'
//final aka can it inherit?
open class Animal(val name: String,
                  var height: Double,
                  var weight: Double) {
    //objects initialized in init function
    //check if values are ok or not
    init {
        val regex = Regex(".*\\d+.*")

        //if these arguments arent met, illegalargumentexception will be thrown
        require(!name.matches(regex)) {"Animal name cannot contain numbers"}

        //height must be greater than 0, if not, then show message
        require(height > 0) {"Height must be greater than 0"}

        require(weight > 0) {"weight must be greater than 0"}
    }

    open fun getInfo(): Unit {
        println("$name is $height tall and weighs $weight")
    }
}

class Dog(name: String,
          height: Double,
          weight: Double,
          var owner: String) : Animal(name, height, weight){    //this is how you inherit

    //overridden method
    override fun getInfo(): Unit {
        println("$name is $height tall and weighs $weight and is owned by $owner")
    }
}

interface Flyable {
    var flies: Boolean

    fun fly(distMile: Double): Unit
}

class Bird constructor(val name: String, override var flies: Boolean = true) : Flyable{
    override fun fly(distMiles: Double): Unit {
        if(flies){
            println("$name flies $distMiles miles")
        }
    }
}